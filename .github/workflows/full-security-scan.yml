Great! Here‚Äôs a full example of your updated full-security-scan.yml workflow that includes the detailed Bandit job integrated with your other security scans, artifact uploads, and summary posting. It also keeps everything organized and ready to run on pull requests to main or develop.

name: üõ°Ô∏è Full Security Scan Pipeline

on:
  pull_request:
    branches: [main, develop]

jobs:
  # Matrix to run multiple scanners in parallel
  security-scans:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scanner: [semgrep-frontend, semgrep-backend, retire, gitleaks, trivy]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js (for frontend & retire.js)
        if: matrix.scanner == 'semgrep-frontend' || matrix.scanner == 'retire'
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Setup Python (for semgrep-backend)
        if: matrix.scanner == 'semgrep-backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Semgrep
        if: matrix.scanner == 'semgrep-frontend' || matrix.scanner == 'semgrep-backend'
        run: pip install semgrep

      - name: Install Retire.js
        if: matrix.scanner == 'retire'
        run: npm install -g retire

      - name: Run Semgrep Frontend Scan
        if: matrix.scanner == 'semgrep-frontend'
        run: semgrep --config .github/semgrep/frontend-rules.yml frontend --json > semgrep-frontend.json || true

      - name: Run Semgrep Backend Scan
        if: matrix.scanner == 'semgrep-backend'
        run: semgrep --config .github/semgrep/backend-rules.yml backend --json > semgrep-backend.json || true

      - name: Run Retire.js Scan
        if: matrix.scanner == 'retire'
        run: retire --path frontend --outputformat json --outputpath retire-frontend.json || true

      - name: Run Gitleaks Scan
        if: matrix.scanner == 'gitleaks'
        uses: zricethezav/gitleaks-action@v2
        with:
          args: --redact --report-path=gitleaks-report.json || true

      - name: Run Trivy Scan (Docker image)
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: your-image-name:latest
          format: json
          output: trivy-report.json

      - name: Upload scan artifacts
        if: matrix.scanner == 'semgrep-frontend'
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-frontend-report
          path: semgrep-frontend.json

      - name: Upload scan artifacts
        if: matrix.scanner == 'semgrep-backend'
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-backend-report
          path: semgrep-backend.json

      - name: Upload scan artifacts
        if: matrix.scanner == 'retire'
        uses: actions/upload-artifact@v4
        with:
          name: retire-frontend-report
          path: retire-frontend.json

      - name: Upload scan artifacts
        if: matrix.scanner == 'gitleaks'
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

      - name: Upload scan artifacts
        if: matrix.scanner == 'trivy'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  # Bandit job with detailed filtering and annotations
  bandit:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit and save JSON report
        run: |
          if find . -name "*.py" | grep -q .; then
            bandit -r . -f json -o bandit-report.json
          else
            echo '{"results": []}' > bandit-report.json
            echo "‚ö†Ô∏è No Python files found to scan. Generated empty report."
          fi

      - name: Generate filtered Bandit report and comment content
        id: bandit-scan
        run: |
          python - <<EOF
          import json, sys, os

          MIN_CONFIDENCE = {'low': 0, 'medium': 1, 'high': 2}
          CONFIDENCE_MAP = {'low': 0, 'medium': 1, 'high': 2}

          with open("bandit-report.json") as f:
              data = json.load(f)

          def conf_to_num(conf):
              return CONFIDENCE_MAP.get(conf.lower(), 0)

          high_issues = []
          all_issues = []

          for issue in data.get("results", []):
              conf_num = conf_to_num(issue.get("issue_confidence", "").lower())
              if conf_num < MIN_CONFIDENCE['medium']:
                  continue

              entry = f"- `{issue['filename']}:{issue['line_number']}`: {issue['issue_text']} (**{issue['issue_severity']}**, {issue['issue_confidence']})"
              all_issues.append({
                  'text': entry,
                  'filename': issue['filename'],
                  'line': issue['line_number'],
                  'severity': issue['issue_severity'].lower(),
                  'confidence': issue['issue_confidence'].lower(),
                  'issue_text': issue['issue_text'],
                  'test_id': issue.get('test_id', 'Bandit'),
              })

              if issue['issue_severity'].lower() == 'high':
                  high_issues.append(entry)

          comment = []
          comment.append("## üîí Bandit Security Scan Results (Confidence: Medium+)")
          if all_issues:
              comment.append(f"**Total Issues Found**: {len(all_issues)}\n")
              for issue in all_issues:
                  comment.append(issue['text'])
          else:
              comment.append("‚úÖ No issues found.")

          run_url = os.getenv('GITHUB_SERVER_URL') + '/' + os.getenv('GITHUB_REPOSITORY') + '/actions/runs/' + os.getenv('GITHUB_RUN_ID')
          comment.append("\n---\n")
          comment.append(f"üìÑ Download the full Bandit report from the **Artifacts** section of the [Actions run page]({run_url}).")

          with open("bandit-comment.md", "w") as out:
              out.write("\n".join(comment))

          import pathlib
          pathlib.Path("filtered-issues.json").write_text(json.dumps(all_issues))

          if high_issues:
              sys.exit(1)
          EOF

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload filtered issues JSON
        uses: actions/upload-artifact@v4
        with:
          name: filtered-bandit-issues
          path: filtered-issues.json

      - name: Comment on PR with Bandit summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('bandit-comment.md', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Post Bandit issues as GitHub Check annotations
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issues = JSON.parse(fs.readFileSync('filtered-issues.json', 'utf8'));

            const checkRun = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Bandit Security Scan",
              head_sha: context.sha,
              status: "in_progress",
            });

            const maxAnnotations = 50;
            const annotations = [];

            for (let i = 0; i < Math.min(issues.length, maxAnnotations); i++) {
              const issue = issues[i];

              let annotation_level = "notice";
              if (issue.severity === "high") {
                annotation_level = "failure";
              } else if (issue.severity === "medium") {
                annotation_level = "warning";
              }

              annotations.push({
                path: issue.filename,
                start_line: issue.line,
                end_line: issue.line,
                annotation_level: annotation_level,
                message: issue.issue_text,
                title: `[${issue.test_id}] ${issue.severity.toUpperCase()} severity`,
              });
            }

            const hasHigh = issues.some(issue => issue.severity === "high");
            const conclusion = hasHigh ? "failure" : "success";

            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkRun.data.id,
              status: "completed",
              conclusion: conclusion,
              output: {
                title: "Bandit Security Scan Results",
                summary: `${issues.length}
