name: 🛡️ Full Security Scan Pipeline

on:
  pull_request:
    branches: [main, develop]

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  security-scans:
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v3

      - name: 🐍 Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 🧰 Install Python dependencies
        run: |
          pip install semgrep bandit beautifulsoup4

      - name: 🛠 Install Retire.js and other tools
        run: |
          npm install -g retire
          sudo apt-get update && sudo apt-get install -y jq

      - name: 🔍 Run Bandit scan
        run: bandit -r backend -f json -o security-reports/raw/bandit-report.json || true

      - name: 🔍 Run Semgrep frontend React scan
        run: semgrep --config=p/react --json --output=security-reports/raw/semgrep-frontend-react.json ./frontend/src || true

      - name: 🔍 Run Semgrep frontend TS scan
        run: semgrep --config=p/typescript --json --output=security-reports/raw/semgrep-frontend-ts.json ./frontend/src || true

      - name: 🔍 Run Semgrep backend scan
        run: semgrep --config=p/ci/python --json --output=security-reports/raw/semgrep-backend.json backend || true

      - name: 🔍 Run Retire.js scan
        run: retire --path frontend --outputformat json --outputpath security-reports/raw/retire-report.json || true

      - name: 🔍 Run Gitleaks scan
        uses: zricethezav/gitleaks-action@v2
        with:
          args: --redact --report-path=security-reports/raw/gitleaks-report.json || true

      - name: 🔍 Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: your-image-name:latest
          format: json
          output: security-reports/raw/trivy-report.json

      - name: 🔍 Run OWASP ZAP scan
        run: |
          docker run --rm -v ${{ github.workspace }}:/zap/wrk:rw -t ghcr.io/zaproxy/zap-stable zap-baseline.py \
            -t https://your-app-url.com -r security-reports/raw/zap-report.html || true

      - name: 📁 Ensure report directory exists
        run: mkdir -p security-reports

      - name: 🧠 Generate combined security report
        run: python .github/scripts/generate_full_report.py \
          --bandit security-reports/raw/bandit-report.json \
          --semgrep-frontend-react security-reports/raw/semgrep-frontend-react.json \
          --semgrep-frontend-ts security-reports/raw/semgrep-frontend-ts.json \
          --semgrep-backend security-reports/raw/semgrep-backend.json \
          --gitleaks security-reports/raw/gitleaks-report.json \
          --retire security-reports/raw/retire-report.json \
          --trivy security-reports/raw/trivy-report.json \
          --zap security-reports/raw/zap-report.html \
          --output security-reports/summary_report.md

      - name: ☁️ Upload raw scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: raw-scan-results
          path: security-reports/raw/

      - name: ☁️ Upload combined report
        uses: actions/upload-artifact@v4
        with:
          name: summary-report
          path: security-reports/summary_report.md

      - name: 💬 Post security summary comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-reports/summary_report.md', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔐 Security Scan Summary\n\n${summary}`
            });

      - name: ❌ Fail if critical issues found
        run: |
          if grep -q "CRITICAL ISSUE FOUND" security-reports/summary_report.md; then
            echo "Critical security issues found. Failing the job."
            exit 1
          else
            echo "No critical security issues found."
          fi
