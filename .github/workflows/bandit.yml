name: Bandit Security Scan (Fail on High Only with Confidence Filter & Check Annotations)

on:
  pull_request:
    branches: [main]

jobs:
  bandit:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write          
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit and save JSON report
        run: |
          if find . -name "*.py" | grep -q .; then
            bandit -r . -f json -o bandit-report.json
          else
            echo '{"results": []}' > bandit-report.json
            echo "‚ö†Ô∏è No Python files found to scan. Generated empty report."
          fi

      - name: Generate filtered Bandit report and comment content
        id: bandit-scan
        run: |
          python - <<'EOF'
          import json, sys, os, pathlib
          MIN_CONF = {'low': 0, 'medium': 1, 'high': 2}
          MAP = {'low': 0, 'medium': 1, 'high': 2}

          data = json.load(open("bandit-report.json"))
          def conf_to_num(x): return MAP.get((x or '').lower(), 0)

          high = []
          all_ = []
          for issue in data.get("results", []):
              if conf_to_num(issue.get("issue_confidence")) < MIN_CONF['medium']:
                  continue
              entry = f"- `{issue['filename']}:{issue['line_number']}`: {issue['issue_text']} (**{issue['issue_severity']}**, {issue['issue_confidence']})"
              all_.append({
                  'text': entry,
                  'filename': issue['filename'],
                  'line': issue['line_number'],
                  'severity': (issue['issue_severity'] or '').lower(),
                  'confidence': (issue['issue_confidence'] or '').lower(),
                  'issue_text': issue['issue_text'],
                  'test_id': issue.get('test_id', 'Bandit'),
              })
              if (issue['issue_severity'] or '').lower() == 'high':
                  high.append(entry)

          run_url = f"{os.getenv('GITHUB_SERVER_URL')}/{os.getenv('GITHUB_REPOSITORY')}/actions/runs/{os.getenv('GITHUB_RUN_ID')}"
          comment = ["## üîí Bandit Security Scan Results (Confidence: Medium+)"]
          comment.append(f"**Total Issues Found**: {len(all_)}\n" if all_ else "‚úÖ No issues found.")
          if all_:
              comment.extend(i['text'] for i in all_)
          comment += ["", "---", f"üìÑ Download the full Bandit report from the **Artifacts** section of the [Actions run page]({run_url})."]

          pathlib.Path("bandit-comment.md").write_text("\n".join(comment))
          pathlib.Path("filtered-issues.json").write_text(json.dumps(all_))
          sys.exit(1 if high else 0)
          EOF

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload filtered issues JSON
        uses: actions/upload-artifact@v4
        with:
          name: filtered-bandit-issues
          path: filtered-issues.json

      # Only comment for same-repo PRs (avoid 403 on forks/Dependabot)
      - name: Comment on PR with Bandit summary
        if: ${{ always() && github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('bandit-comment.md', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Post Bandit issues as GitHub Check annotations
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issues = JSON.parse(fs.readFileSync('filtered-issues.json', 'utf8'));

            const checkRun = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Bandit Security Scan",
              head_sha: context.sha,
              status: "in_progress",
            });

            const maxAnnotations = 50;
            const annotations = issues.slice(0, maxAnnotations).map(issue => {
              let level = "notice";
              if (issue.severity === "high") level = "failure";
              else if (issue.severity === "medium") level = "warning";
              return {
                path: issue.filename,
                start_line: issue.line,
                end_line: issue.line,
                annotation_level: level,
                message: issue.issue_text,
                title: `[${issue.test_id}] ${issue.severity.toUpperCase()} severity`,
              };
            });

            const hasHigh = issues.some(i => i.severity === "high");
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkRun.data.id,
              status: "completed",
              conclusion: hasHigh ? "failure" : "success",
              output: {
                title: "Bandit Security Scan Results",
                summary: `${issues.length} issues found (Medium+ confidence).`,
                annotations,
              },
            });
