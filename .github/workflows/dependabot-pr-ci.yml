name: Dependabot PR CI - Astroskills LMS

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - develop
    paths-ignore:
      - '**.md'

jobs:
  test-and-scan:
    runs-on: ubuntu-latest
    name: Run Tests and Security Scans on Dependabot PR

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          pytest || exit 0

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false || exit 0

      - name: Run Semgrep Frontend Scan
        run: |
          pip install semgrep
          semgrep --config .github/semgrep/frontend-rules.yml frontend --json > semgrep-frontend.json || true

      - name: Run Semgrep Backend Scan
        run: |
          semgrep --config .github/semgrep/backend-rules.yml backend --json > semgrep-backend.json || true

      - name: Run Bandit Backend Scan
        run: |
          pip install bandit
          bandit -r backend -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            semgrep-frontend.json
            semgrep-backend.json
            bandit-report.json

      - name: Generate and post PR comment summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            function parseFindings(report) {
              if (!report || !report.results) return [];
              return report.results.map(f => `- ${f.check_id || f.test_id || 'rule'} in \`${f.path || f.filename}\`: ${f.extra?.message || f.issue_text || ''} (severity: ${f.extra?.severity || f.issue_severity || 'N/A'})`);
            }

            const frontendReport = JSON.parse(fs.readFileSync('semgrep-frontend.json', 'utf8'));
            const backendReport = JSON.parse(fs.readFileSync('semgrep-backend.json', 'utf8'));
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));

            const frontendFindings = parseFindings(frontendReport);
            const backendFindings = parseFindings(backendReport);
            const banditFindings = parseFindings(banditReport);

            let commentBody = "## üõ°Ô∏è Dependabot Security Scan Results\n\n";

            if (frontendFindings.length || backendFindings.length || banditFindings.length) {
              commentBody += "### Semgrep Frontend Findings\n";
              commentBody += frontendFindings.length ? frontendFindings.join('\n') : "No issues found.\n";

              commentBody += "\n### Semgrep Backend Findings\n";
              commentBody += backendFindings.length ? backendFindings.join('\n') : "No issues found.\n";

              commentBody += "\n### Bandit Findings\n";
              commentBody += banditFindings.length ? banditFindings.join('\n') : "No issues found.\n";
            } else {
              commentBody += "‚úÖ No issues found in security scans.";
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
