name: CI/CD Security Scan

on:
  pull_request_target:
    branches:
      - develop
      - main
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  security-scan:
    name: üîê Full Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üìÅ Create reports directory
        run: mkdir -p security-reports/raw

      - name: üì¶ Install security tools
        run: |
          pip install -r requirements-ci.txt
          npm install -g gitleaks retire
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      # Scans
      - name: üîç Semgrep Backend
        run: semgrep --config=p/ci/python --json --output=security-reports/raw/semgrep-backend.json backend || true

      - name: üîç Semgrep Frontend
        run: semgrep --config=p/react --json --output=security-reports/raw/semgrep-frontend.json frontend/src || true

      - name: üõ° Bandit
        run: bandit -r backend -f json -o security-reports/raw/bandit-report.json || true

      - name: üîë Gitleaks
        run: gitleaks detect --source . --report-format json --report-path security-reports/raw/gitleaks-report.json || true

      - name: üì¶ Retire.js
        run: retire --path frontend --outputformat json --outputpath security-reports/raw/retire-frontend.json || true

      - name: üê≥ Trivy FS
        run: trivy fs --format json --output security-reports/raw/trivy-report.json . || true

      # Generate combined summary
      - name: üìÑ Generate summary
        run: |
          python .github/scripts/generate_full_report.py \
            --bandit security-reports/raw/bandit-report.json \
            --semgrep-backend security-reports/raw/semgrep-backend.json \
            --semgrep-frontend security-reports/raw/semgrep-frontend.json \
            --gitleaks security-reports/raw/gitleaks-report.json \
            --retire security-reports/raw/retire-frontend.json \
            --trivy security-reports/raw/trivy-report.json \
            --output security-reports/summary_report.md || true

      # Upload artifacts
      - name: üì§ Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: security-reports/

      # Post short PR comment
      - name: üí¨ Post concise PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'security-reports/summary_report.md';

            if (!fs.existsSync(summaryPath)) {
              core.warning("No summary report found, skipping comment.");
              return;
            }

            const content = fs.readFileSync(summaryPath, 'utf8');
            const critical = (content.match(/‚ùå Critical/g) || []).length;
            const high = (content.match(/‚ö†Ô∏è High/g) || []).length;
            const medium = (content.match(/üü† Medium/g) || []).length;

            const shortSummary = `
            ## üîê Security Scan Summary
            **Critical:** ${critical} | **High:** ${high} | **Medium:** ${medium}

            Full details are in the [security scan artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).

            _This scan checks for vulnerabilities in Python, Node.js, secrets, outdated dependencies, and misconfigurations._
            `;

            // Find and update existing comment, or create new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.data.find(c =>
              c.user.type === 'Bot' && c.body.startsWith('## üîê Security Scan Summary')
            );

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: shortSummary,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: shortSummary,
              });
            }
