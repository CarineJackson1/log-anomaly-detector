name: üö® Dependabot Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop]
    paths-ignore:
      - '**.md'

jobs:
  dependabot-security:
    runs-on: ubuntu-latest
    name: Run Security Scans on Dependabot PR

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: üîß Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: üåê Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: üì¶ Install scanning tools
        run: |
          pip install semgrep bandit
          npm install -g retire

      - name: üîç Run Semgrep Frontend
        run: semgrep --config .github/semgrep/frontend-rules.yml frontend --json > semgrep-frontend.json || true

      - name: üîç Run Semgrep Backend
        run: semgrep --config .github/semgrep/backend-rules.yml backend --json > semgrep-backend.json || true

      - name: üïµÔ∏è Run Bandit
        run: bandit -r backend -f json -o bandit-report.json || true

      - name: üìú Run Retire.js
        run: retire --path frontend --outputformat json --outputpath retire-frontend.json || true

      - name: üì§ Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dependabot-security-reports
          path: |
            semgrep-frontend.json
            semgrep-backend.json
            bandit-report.json
            retire-frontend.json

      - name: üìù Post scan summary to PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            function parseSemgrep(data) {
              if (!data.results) return [];
              return data.results.map(r => `- [${r.extra?.severity || 'N/A'}] \`${r.check_id}\` in \`${r.path}\`: ${r.extra?.message}`);
            }

            function parseBandit(data) {
              if (!data.results) return [];
              return data.results.map(r => `- [${r.issue_severity}] \`${r.test_id}\` in \`${r.filename}\`: ${r.issue_text}`);
            }

            function parseRetire(data) {
              if (!data.data) return [];
              return data.data.map(r => `- [HIGH] \`${r.component}\` in \`${r.file}\``);
            }

            function loadJSON(path) {
              if (!fs.existsSync(path)) return {};
              return JSON.parse(fs.readFileSync(path, 'utf8'));
            }

            const semgrepFrontend = loadJSON('semgrep-frontend.json');
            const semgrepBackend = loadJSON('semgrep-backend.json');
            const bandit = loadJSON('bandit-report.json');
            const retire = loadJSON('retire-frontend.json');

            let commentBody = "## üõ°Ô∏è Dependabot Security Scan Summary\n\n";

            commentBody += "### Semgrep Frontend\n" + (parseSemgrep(semgrepFrontend).join("\n") || "‚úÖ No issues found.") + "\n\n";
            commentBody += "### Semgrep Backend\n" + (parseSemgrep(semgrepBackend).join("\n") || "‚úÖ No issues found.") + "\n\n";
            commentBody += "### Bandit\n" + (parseBandit(bandit).join("\n") || "‚úÖ No issues found.") + "\n\n";
            commentBody += "### Retire.js\n" + (parseRetire(retire).join("\n") || "‚úÖ No issues found.") + "\n\n";

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
