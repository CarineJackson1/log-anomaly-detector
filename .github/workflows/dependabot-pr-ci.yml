name: Bare Bones Dependabot Security Scan (No Trivy)

on:
  pull_request_target:
    branches:
      - develop
    paths-ignore:
      - '**.md'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python and Node
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install tools
        run: |
          pip install semgrep bandit reportlab beautifulsoup4
          npm install -g gitleaks retire

      - name: Run Semgrep Scan (frontend + backend)
        run: |
          semgrep --config=p/ci/python --json --output=semgrep-backend.json backend || true
          semgrep --config=p/react --json --output=semgrep-frontend.json frontend/src || true

      - name: Run Bandit Scan
        run: bandit -r backend -f json -o bandit-report.json || true

      - name: Run Gitleaks Scan
        run: gitleaks detect --source . --report-format json --report-path gitleaks-report.json || true

      - name: Run Retire.js Scan
        run: retire --path frontend --outputformat json --outputpath retire-frontend.json || true

      - name: Generate Markdown Report
        run: |
          mkdir -p security-reports
          python .github/scripts/generate_full_report.py \
            --bandit bandit-report.json \
            --semgrep-backend semgrep-backend.json \
            --semgrep-frontend semgrep-frontend.json \
            --gitleaks gitleaks-report.json \
            --retire retire-frontend.json \
            --output security-reports/summary_report.md || true

      - name: Post PR comment with report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const MAX_CHARS = 60000;
            const path = 'security-reports/summary_report.md';
            if (!fs.existsSync(path)) return;
            const body = fs.readFileSync(path, 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔐 Security Scan Summary\n\n${body.length > MAX_CHARS ? body.slice(0, MAX_CHARS) + "\n\n...truncated" : body}`
            });

      - name: Fail if critical issues found and label + close PR
        run: |
          python - <<'EOF'
import json, sys, os
def has_critical(f):
    if not os.path.exists(f): return False
    try:
        data = json.load(open(f))
        def search(obj):
            if isinstance(obj, dict):
                if obj.get('severity', '').lower() == 'critical':
                    return True
                for v in obj.values():
                    if search(v): return True
            elif isinstance(obj, list):
                for i in obj:
                    if search(i): return True
            return False
        return search(data)
    except: return False

files = [
    'bandit-report.json',
    'semgrep-backend.json',
    'semgrep-frontend.json',
    'gitleaks-report.json',
    'retire-frontend.json',
]

if any(has_critical(f) for f in files):
    print("Critical issues detected! Failing...")
    sys.exit(1)
EOF
        continue-on-error: false

      - name: Add label and close PR if failed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security-review-needed']
            });
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });
