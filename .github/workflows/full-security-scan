name: Full Security Scan

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'

jobs:
  full-scan:
    if: contains(github.event.pull_request.labels.*.name, 'security-scan-required') || github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    name: üîê Full Security Scan

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üêç Setup Python & Node.js
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üìÅ Create reports directory
        run: mkdir -p security-reports/raw

      - name: üì¶ Install tools & dependencies
        run: |
          pip install -r requirements-ci.txt
          npm ci
          npm install -g retire gitleaks

      - name: üß™ Run Bandit scan
        run: bandit -r backend -f json -o security-reports/raw/bandit-report.json || true

      - name: üïµÔ∏è Run Semgrep React scan
        run: semgrep --config=p/react --json --output=security-reports/raw/semgrep-frontend-react.json frontend/src || true

      - name: üïµÔ∏è Run Semgrep TS scan
        run: semgrep --config=p/typescript --json --output=security-reports/raw/semgrep-frontend-ts.json frontend/src || true

      - name: üïµÔ∏è Run Semgrep Backend scan
        run: semgrep --config=p/ci/python --json --output=security-reports/raw/semgrep-backend.json backend || true

      - name: üîê Run Gitleaks scan
        run: gitleaks detect --source . --report-format json --report-path security-reports/raw/gitleaks-report.json || true

      - name: üß± Run Retire.js scan
        run: retire --path frontend --outputformat json --outputpath security-reports/raw/retire-frontend.json || true

      - name: üê≥ Run Trivy scan
        run: trivy fs --format json --output security-reports/raw/trivy-report.json . || true

      - name: üß† Generate summary report (MD + PDF)
        run: |
          python .github/scripts/generate_full_report.py \
            --bandit security-reports/raw/bandit-report.json \
            --semgrep-frontend-react security-reports/raw/semgrep-frontend-react.json \
            --semgrep-frontend-ts security-reports/raw/semgrep-frontend-ts.json \
            --semgrep-backend security-reports/raw/semgrep-backend.json \
            --gitleaks security-reports/raw/gitleaks-report.json \
            --retire security-reports/raw/retire-frontend.json \
            --trivy security-reports/raw/trivy-report.json \
            --output security-reports/summary_report.md

      - name: ‚òÅÔ∏è Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: full-security-scan-reports
          path: |
            security-reports/summary_report.md
            security-reports/summary_report.pdf
            security-reports/raw/

      - name: üí¨ Post PR comment with full report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const MAX_CHARS = 60000;
            const path = 'security-reports/summary_report.md';

            if (!fs.existsSync(path)) {
              console.log("No PR report found, skipping comment.");
              return;
            }

            const content = fs.readFileSync(path, 'utf8');
            const truncated = content.length > MAX_CHARS ? content.slice(0, MAX_CHARS) + "\n\n...truncated" : content;

            // Optionally update existing comment logic here if desired (not included)

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîê Full Security Scan Report\n\n${truncated}`,
            });

      - name: Fail on critical issues
        id: critical-check
        run: |
          python - <<EOF
          import json, sys, os
          def has_critical(path):
              if not os.path.exists(path):
                  return False
              try:
                  data = json.load(open(path))
              except:
                  return False
              def search(obj):
                  if isinstance(obj, dict):
                      for key in ['severity', 'issue_severity', 'Severity']:
                          if obj.get(key, '').lower() == 'critical':
                              return True
                      return any(search(v) for v in obj.values())
                  if isinstance(obj, list):
                      return any(search(i) for i in obj)
                  return False
              return search(data)

          files = [
              'security-reports/raw/bandit-report.json',
              'security-reports/raw/semgrep-backend.json',
              'security-reports/raw/semgrep-frontend-react.json',
              'security-reports/raw/semgrep-frontend-ts.json',
              'security-reports/raw/gitleaks-report.json',
              'security-reports/raw/retire-frontend.json',
              'security-reports/raw/trivy-report.json',
          ]

          if any(has_critical(f) for f in files):
              print("‚ùå Critical vulnerabilities found. Failing the workflow.")
              sys.exit(1)
          else:
              print("‚úÖ No critical vulnerabilities found.")
          EOF

      - name: Label and close PR on critical issues
        if: steps.critical-check.conclusion == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security-review-needed']
            });
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });
