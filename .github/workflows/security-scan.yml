name: Security Scans

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches:
      - develop
    paths-ignore:
      - '**.md'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  fast-scan:
    runs-on: ubuntu-latest
    name: üîç Quick Semgrep Scan

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Semgrep
        run: pip install semgrep

      - name: üìÅ Create report folder
        run: mkdir -p security-reports/raw

      - name: üîç Run Semgrep Scan
        run: semgrep --config=auto --json --output=security-reports/raw/semgrep.json . || true

      - name: ‚òÅÔ∏è Upload Semgrep report artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: security-reports/raw/semgrep.json

      - name: üí¨ Post or update PR comment with Semgrep summary
        if: github.actor != 'dependabot[bot]'
        uses: actions/github-script@v7
        env:
          REPORT_PATH: security-reports/raw/semgrep.json
          COMMENT_TITLE: "üîç Fast Semgrep Scan Report"
        with:
          script: |
            const fs = require('fs');
            const reportPath = process.env.REPORT_PATH;

            if (!fs.existsSync(reportPath)) {
              console.warn("Report file not found, skipping comment.");
              return;
            }

            const data = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            const results = data.results || [];

            if (results.length === 0) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ${process.env.COMMENT_TITLE}\n\n‚úÖ No issues found!`
              });
              return;
            }

            const severityCounts = results.reduce((acc, r) => {
              const sev = (r.extra?.severity || 'unknown').toLowerCase();
              acc[sev] = (acc[sev] || 0) + 1;
              return acc;
            }, {});

            const severitySummary = Object.entries(severityCounts)
              .map(([sev, count]) => `- ${sev.charAt(0).toUpperCase() + sev.slice(1)}: ${count}`)
              .join('\n');

            const topIssues = results.slice(0, 5).map(r => {
              const file = r.path || 'unknown file';
              const line = r.start?.line || '?';
              const msg = r.extra?.message || 'No message';
              const sev = r.extra?.severity || 'N/A';
              return `- \`${file}:${line}\` ‚Äî ${msg} _(Severity: ${sev})_`;
            }).join('\n');

            const body = `## ${process.env.COMMENT_TITLE}\n\n‚ö†Ô∏è Found ${results.length} issue(s):\n\n**By severity:**\n${severitySummary}\n\n**Top issues:**\n${topIssues}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            });
