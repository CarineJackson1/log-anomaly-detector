name: Fast Security Scan

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  fast-scan:
    runs-on: ubuntu-latest
    name: 🔍 Quick Semgrep Scan

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Semgrep
        run: pip install semgrep

      - name: 📁 Create report folder
        run: mkdir -p security-reports/raw

      - name: 🔍 Run Semgrep Scan
        run: semgrep --config=auto --json --output=security-reports/raw/semgrep.json . || true

      - name: ☁️ Upload Semgrep report artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: security-reports/raw/semgrep.json

      - name: 💬 Post or update PR comment with Semgrep summary
        if: github.actor != 'dependabot[bot]'
        uses: actions/github-script@v7
        env:
          REPORT_PATH: security-reports/raw/semgrep.json
        with:
          script: |
            const fs = require('fs');
            const path = process.env.REPORT_PATH;
            const MAX_CHARS = 60000;

            if (!fs.existsSync(path)) {
              console.log("Semgrep report not found.");
              return;
            }

            const data = JSON.parse(fs.readFileSync(path, 'utf8'));
            const results = data.results || [];

            let body = "";
            if (results.length === 0) {
              body = "✅ **Semgrep found no issues.**";
            } else {
              const severityCounts = results.reduce((acc, r) => {
                const level = r.extra?.severity || "unknown";
                acc[level] = (acc[level] || 0) + 1;
                return acc;
              }, {});

              const severitySummary = Object.entries(severityCounts)
                .map(([level, count]) => `- ${level}: ${count}`)
                .join('\n');

              body = `⚠️ **Semgrep found ${results.length} issue(s):**\n\n**By severity:**\n${severitySummary}\n\n` +
                results.slice(0, 10).map(r => {
                  const file = r.path || "unknown file";
                  const line = r.start?.line || "?";
                  const message = r.extra?.message || "No message";
                  const severity = r.extra?.severity || "N/A";
                  return `- \`${file}:${line}\` — ${message} _(Severity: ${severity})_`;
                }).join('\n') +
                (results.length > 10 ? `\n\n...and ${results.length - 10} more.` : '');
            }

            const truncated = body.length > MAX_CHARS
              ? body.slice(0, MAX_CHARS) + "\n\n...truncated"
              : body;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.data.find(c =>
              c.user.type === 'Bot' &&
              c.body.startsWith('## 🔍 Fast Semgrep Scan Report')
            );

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: `## 🔍 Fast Semgrep Scan Report\n\n${truncated}`,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔍 Fast Semgrep Scan Report\n\n${truncated}`,
              });
            }
